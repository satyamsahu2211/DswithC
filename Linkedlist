#include <stdio.h>
#include<alloc.h>
#include<conio.h>
#include<process.h>
typedef struct simplelink{
    int data ;
    struct simplelink *next;
}node;
node *create(node *p){
    p=(node *)malloc(sizeof(node));
    {
        int a;
        printf("\n\n");
        node *brr[25];
        int arr[25];
        a=0
        while(p!=NULL){
            arr[a]=p->data;
            brr[a]=p->next;
            p=p->next;
            a++;
        }
        for(int i=(a-1;i>=0;i--)
        printf("[%d%u]<--",arr[i],brr[i]);
        printf("HEAD");
        printf("\n\n\npress any key to continue.......");
        getch();
    }
    node *insert_being(node *p){
        node *temp;
        tem=(node *)malloc(sizeof(node));
        printf("\nEnter the inserted data :");
        scanf("%d",&temp->data);
        temp->next=p;
        p=temp;
        return (p);
    }
    node *insert_end (node *p){
        node *temp,q;
        q=p;
        temp=(node *)malloc(sizeof(node));
        printf("\nEnter the inserted data:");
        scanf("%d",&temp->data);
        while(p->next!=NULL){
            p=p->next;
        }p->next=tem;
        temp->next=(node *)NULL;
        return(q);
    }
    node *insert_after(node *p){
        node *temp,*q;
        int x ;
        q=p;
        printf("\,Enter the data(After which you have enter data):");
        scanf("%d",&temp->data);
        while(p->data!=x){
            p=p-next;
        }
        temp=(node *)malloc(sizeof(node));
        printf("\nenter the inserted data :");
        scanf("%d",&temp->data);
        temp->next=p->next;
        p->next=temp;
        return(q);
        }
        int count(node *p){
            int i=0;
            while(!p=NULL){
                p=p->next;
                i++;
            }return (i);
            node *insert_at_spe_pos(node *p){
                node *temp, *q,*r;
                int x,a,i=1;
                a =count(p);
                q=p;
                printf("\,Enter the position(at which you want to enter data):")
                scanf("%d",&x);
                if(x(a+1)){
                    printf("not able to insert node at such position :");
                    getch();
                }else{
                    if(x==1){
                        temp=(node *)malloc(sizeof(node));
                        printf("\\nEnter the inserted data:");
                        scanf("%d",temp->data);
                        temp->next=p;
                        r->next=temp;
                    }
                }return (q);
            }
            node *delend(node *P){
                node *q,*r
            }
            
            node *delend(node *P){
                node *q,*r;
                r=p;
                q=p;
                if (p->next==NULL){
                    r=(node *)NULL;
                }else{
                    while(p->next!=NULL){
                        q=p;
                        p=p->next;
                    }
                    q->next=(node *)NULL;
                    }
                    free(p);
                    return (r);
                }
                node *del_speci_ele(node *p){
                    node *q,*r;
                    int x;
                    q=p;
                    r=q;
                    printf("\n Enter the data to remove ;");
                    scanf("%d",&x);
                    while (q->data!=x){
                        r=q;
                        q=q->next;
                    }if(q==r)
                    p=p->next;
                    else
                    r=r->next=q-next;
                    free(q);
                    return(p);
                }
                node *delbeing(node *P){
                    node *q;
                    q=p; 
                    q=p;
                    p=p->next;
                    free(q)
                    return (p);
                }node *delete_after(node *p){
                    node *temp,*q;
                    int x;
                    q=p;
                    printf("\nEnter the data(after which you want to delete);")
                    scanf("%d",&x);
                    while(p->data!=x);
                    {
                        p=p->next;
                        
                    }
                    temp=p->next
                    p=p->next;
                    free(temp);
                    return (q);         
                    }
        }
        }
    }
}
